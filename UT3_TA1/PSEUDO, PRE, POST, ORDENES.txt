PSEUDOCODIGO(PRECONDICIONES Y POSTCONDICIONES)
	
	DESCRIPCIÓN EN LENGUAJE NATURAL:
		-Se implementa un método que recibe un nuevo nodo como argumento, el nodo que era primero hasta ese momento pasa a ser el siguiente del nuevo nodo y el nuevo nodo pasa a ser el primero de la lista.
	PRECONDICION:
		-La lista tiene que existir.
		-El nuevo nodo debe ser válido.
	POSTCONDICION: 
		-A la lista se le agrega un "newNodo" al inicio.
		-El resto de la lista se mantine inmutable.
	O(1)
	insertarAlInicio(newNodo TNodo)
		newNodo.siguiente <-- this.primero
		this.primero <-- newNodo


	DESCRIPCION EN LENGUAJE NATURAL:
		-Se implementa un método que recibe un nuevo nodo como argumento, si la lista esta vacía lo inserta en primer lugar, en caso contrario recorre la lista hasta llegar al último nodo y lo inserta al final.
	PRECONDICION:
		-La lista tiene que existir.
		-El nuevo nodo debe ser válido.
	POSTCONDICION: 
		-A la lista se le agrega un "newNodo" al final.
		-El resto de la lista se mantine inmutable.
	O(n)
	insertarALFinal(newNodo TNodo)
		aux <-- this.primero
		SI (aux == NULL)
			this.primero <-- newNodo		
		SINO
			MIENTRAS(aux.siguiente <> NULL)
				aux <-- aux.siguiente
			FIN MIENTRAS
			aux.siguiente <-- newNodo
		FIN SI


	DESCRIPCION EN LENGUAJE NATURAL:
		-Se implementa un método que recibe un nuevo nodo como argumento, si la lista esta vacía o la etiqueta del nuevo nodo es menor que la del primer elemento lo inserta en primer lugar, sino, recorre la lista hasta llegar al nodo cuyo próximo nodo tiene una etiqueta mayor y lo inserta, en caso de llegar al final de la lista lo inserta como último elemento.
	PRECONDICION:
		-La lista debe encontrarse ordenada en forma ascendente.
	POSTCONDICION:
		-A la lista se le agrega un "newNodo".
		-La lista debe encontrarse ordenada en forma ascendente.
	O(n)
	insertarOrdenado(newNodo TNodo)
		aux <-- this.primero
		SI (aux == NULL O newNodo.etiqueta < aux.etiqueta)
			aux <-- aux.siguiente
		ELSE
			MIENTRAS (aux.siguiente <> NULL Y aux.siguiente.etiqueta < newNodo.etiqueta)
				aux <-- aux.siguiente
			FIN MIENTRAS
			newNodo.siguiente <-- aux.siguiente
			aux.siguiente <-- newNodo
		FIN SI


	DESCRIPCION EN LENGUAJE NATURAL:
		-Se implementa un método que recibe una etiqueta como argumento, se recorre la lista y cuando se encuentra un nodo cuya etiqueta sea la misma que se recibe como argumento, devuelve el nodo. De lo contrario devuelve el puntero nulo.
	PRECONDICION:
		-La etiqueta a buscar debe ser válida.
	POSTONDICION:
		-La lista se mantine inmutable.
		-Se retorna en TNodo cuya etiqueta coincide con la dada.
		-En caso de no encontrar ninguna etiqueta coincidente, se retorna nulo.
	O(n)
	buscar(etiqueta: Comparable)
		aux <-- this.primero
		MIENTRAS(aux != NULL)
			SI (aux.etiqueta == etiqueta)
				retorno aux
			FIN SI
			aux <-- aux.siguiente
		FIN MIENTRAS
		retorno NULL


	DESCRIPCION EN LENGUAJE NATURAL:
		-Se implementa un método que retorna una lista ordenada en forma ascendente utilizando el método insertarOrdenado.
	PRECONDICION:
		-aux.copia() debe retornar un copia de el nodo aux, TOTALMENTE independiente de la original.
	POSTCONDICION:
		-La lista original se mantiene inmutable.
		-Se retorna una nueva lista TOTALMENTE independiente de la original ordenada.
	O(n^2)
	copiaOrdenada()
		aux <-- this.primero
		toReturn <-- new TLista()
		MIENTRAS (aux <> NULL)
			toReturn.insertarOrdenado(aux.copia())
			aux <-- aux.siguiente
		FIN MIENTRAS
		return toReturn		